# nixos wifi
https://nixos.org/manual/nixos/stable/#sec-installation-booting-networking
sudo su
systemctl start wpa_supplicant
wpa_cli
add_network
set_network 0 ssid "myhomenetwork"
set_network 0 psk "mypassword"
set_network 0 key_mgmt WPA-PSK
enable_network 0
quit
echo 'OR!!!'
nmcli r w on
nmcli d w l
nmcli d w c SomeWifiName password "SomePassword"

# nix repair
sudo nix-store --verify --check-contents --repair

# trace
sudo nixos-rebuild switch --show-trace --verbose --print-build-logs --flake /etc/nixos#laptop

# update
sudo nix flake update --flake /etc/nixos

# nicely reload system units when changing configs
systemd.user.startServices = "sd-switch";

# find .desktop files on nixos
ls -l /run/current-system/sw/share/applications | grep <SomeAppHere>

# symlink with hm
home.file."somelink" = { source = "/some/source"; target = "/some/target"; force = true; };

# add shell script as package
environment.systemPackages = let 
webfish-idle = pkgs.writeShellScriptBin "webfish-idle" ''
  echo 'Hello World'
''; in [ webfish-idle ];

# building
nix-build (for default.nix)
nix build (for flake dir)
Makefile is for if there is no buildPhase ?

# custom lm prompt
  services.displayManager.sessionPackages = [
  ((pkgs.writeTextDir "share/wayland-sessions/hyprland.desktop" ''
    [Desktop Entry]
    Name=hyprland
    Comment=InsertSomeCommentHere
    Exec=${pkgs.hyprland}/bin/hyprland
    Type=Application
  '')
  .overrideAttrs (_: {passthru.providedSessions = ["hyprland"];}))
  ];

# custom directories w/ extra permissions
  systemd.tmpfiles.rules = [
    "d /home/hatosu/X/Github/- 0766 hatosu users 99999d"
    "d /home/hatosu/X/Work/- 0766 hatosu users 99999d"
    "d /home/hatosu/X/School/- 0766 hatosu users 99999d"
    "d /home/hatosu/X/Other/- 0766 hatosu users 99999d"
    "d /home/hatosu/test/erm 0766 hatosu users 99999d"
  ];

# homemanager desktop entry
let discord-icon = "${inputs.personal-files}/icons/discord.png"; in { 
  xdg.desktopEntries = {
    vesktop = {
      exec = "vesktop --enable-features=UseOzonePlatform --ozone-platform=x11 --enable-wayland-ime %U";
      icon = "${discord-icon}";
      name = "Discord";
      genericName = "Internet Messenger";
      comment = "some random discord client...";
      noDisplay = false;
      prefersNonDefaultGPU = false;
      startupNotify = true;
      terminal = false;
      settings = {
        Keywords = "discord;vencord;electron;chat";
        DBusActivatable = "false";
      };
      actions = {
        "Wayland" = {
          exec = "${pkgs.vesktop}/bin/vesktop %u";
          name = "Wayland";
          icon = "vesktop";
        };
      };
      categories = [ "Network" "InstantMessaging" "Chat" ];
      mimeType = [ "" "" "" ];
      type = "Application";
    };
  };
}

# use specific version of cliphist
    cliphist = prev.cliphist.overrideAttrs (old: {
      src = prev.fetchFromGitHub {
        owner = "sentriz";
        repo = "cliphist";
        rev = "8c48df70bb3d9d04ae8691513e81293ed296231a";
        hash = "sha256-tImRbWjYCdIY8wVMibc5g5/qYZGwgT9pl4pWvY7BDlI=";
      };
    });

# language
  i18n = {
    defaultLocale = "ja_JP.UTF-8";
    supportedLocales = ["ja_JP.UTF-8/UTF-8"];
  };
  home.language = {
    base = "ja_JP.UTF-8";
    ctype = "ja_JP.UTF-8";
    numeric = "ja_JP.UTF-8";
    time = "ja_JP.UTF-8";
    collate = "ja_JP.UTF-8";
    monetary = "ja_JP.UTF-8";
    messages = "ja_JP.UTF-8";
    paper = "ja_JP.UTF-8";
    name = "ja_JP.UTF-8";
    address = "ja_JP.UTF-8";
    telephone = "ja_JP.UTF-8";
    measurement = "ja_JP.UTF-8";
  };
